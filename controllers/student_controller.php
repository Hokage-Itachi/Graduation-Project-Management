<?php
include_once("./controllers/base_controller.php");
include_once("./models/service/TeacherService.php");
include_once("./models/service/ProjectService.php");
include_once("./models/service/TaskService.php");
include_once("./models/service/StudentService.php");
include_once("./models/service/PhaseService.php");
include_once("./models/service/BranchService.php");
include_once("./models/service/PostService.php");
include_once("./models/service/CommentService.php");
include_once("./models/service/UserService.php");

class StudentController extends BaseController{
    private $studentService;
    private $teacherService;
    private $projectService;
    private $branchService;
    private $userService;
    private $data;

    public function __construct()
    {
        $this->file = "student/student_ui.php";
        $this->teacherService = new TeacherService();
        $this->studentService = new StudentService();
        $this->taskService = new TaskService();
        $this->phaseService = new PhaseService();
        $this->projectService = new ProjectService();
        $this->branchService = new BranchService();
        $this->postService = new PostService();
        $this->commentService = new CommentService();
        $this->userService = new UserService();
    }

    public function renderSignupPage($data){
//        if($this->canSignUp()){
            $this->file = 'student/signup.php';
            $path = './views/'. $this->file;
            include_once($path);

//        } else {
//            header("location: /student");
//        }
    }
    public function render($data)
    {
//        error_log("Can signup".$this->canSignUp());

//        if($this->canSignUp()){
//            header("location: /student/signup");
//            die();
//        } else {
            parent::render($data); // TODO: Change the autogenerated stub
//        }
//        echo "Here";
    }

    function addProject(){
        if($_SERVER['REQUEST_METHOD'] == "POST"){
            $name = $_POST['name'];
            $teacher_email = $_POST['teacher'];
            $branch = $_POST['branch'];
            $user = $this->userService->findByEmail($teacher_email);
            $teacher = $this->teacherService->getByUserID($user->getUserId());
//            error_log($teacher->getTeacherId());
            $student = $this->studentService->getByUserID($_SESSION['user']['id']);
            $result = $this->projectService->insert($name, '0', $branch, '0', 'Standard', '', $student->getRowId(), $teacher->getTeacherId());
//            error_log($result);
            header('location: /student');

        }
    }

    public function getBranchData(){
        $branches = $this->branchService->getAll();
        $branch_data = array();
        for($i = 0 ; $i< count($branches); $i++){
            $data = array(
                "name"=>$branches[$i]->getName(),
                "id"=>$branches[$i]->getId()
            );
            $branch_data[$i] = $data;
        }
        return $branch_data;
    }

    public function getTeacherData(){
        $teachers = $this->teacherService->getAll();
        $teacher_data = array();
        for ($i = 0; $i < count($teachers); $i++){
            $data = array(
                "name" => $teachers[$i]->getName(),
                'email'=>$teachers[$i]->getEmail()
            );
            $teacher_data[$i] = $data;

        }
        return $teacher_data;
    }

    public function getSignUpData(){
        $this->data['teachers'] = $this->getTeacherData();
        $this->data['branches'] = $this->getBranchData();
        return $this->data;
    }

    public function canSignUp(){
        $student = $this->studentService->getByUserID($_SESSION['user']['id']);
        $all_project = $this->projectService->getAll();
        foreach ($all_project as $project) {
            if(($project->getStudentId() == $student->getRowId()) && ($project->getCompleted() == '0')){
                error_log("Project: ".$project->getProjectId());
//                error_log($project->getCompleted());
                return false;
            }
        }
        return true;
    }

    public function getProjectData(){
        $student = $this->studentService->getByUserID($_SESSION['user']['id']);
        $projects = $this->projectService->getAll();
        $project = "";
        foreach ($projects as $proj) {
            if($proj->getStudentId() == $student->getRowId()){
                if($proj->getCompleted() == '0'){
                    $project = $proj;
                }
            }
        }
        if($project == ""){
            die('Project not found..');
        }
        $data = array(
            "id"=>$project->getProjectId(),
            "name"=>$project->getName(),
            "content"=>$project->getContent(),
            'phases'=>$this->getPhaseData($project->getProjectId()),
            'posts'=>$this->getPostData($project->getProjectId())
        );

        $project_data['project'] = $data;
        $avatar = $student->getAvatar();
//        error_log("avatar: ". $avatar);
        if(!$avatar){
            $project_data['avatar'] = "default_avatar/img_avatar2.png";
        } else{
            $project_data['avatar'] = "user_avatar/".$avatar;
        }

        return $project_data;
    }

    public function getPhaseData($project_id){
        $phases = $this->phaseService->getByProjectID($project_id);
//        error_log($phases[0]->getId());
        $phases_data = array();
        if($phases){
            for ($i = 0; $i<count($phases); $i++){
                $data = array(
                    "id"=> $phases[$i]->getId(),
                    "project_id"=>$project_id,
                    "name"=>$phases[$i]->getName(),
                    "tasks"=>$this->getTaskData($phases[$i]->getId()),
                    "completed_tasks"=>$this->getCompletedTaskNumber($phases[$i]->getId()),
                );
                if(count($this->getTaskData($phases[$i]->getId())) == 0){
                    $data['uncompleted_tasks'] = 0;
                } else {
                    $data['uncompleted_tasks'] = count($this->getTaskData($phases[$i]->getId())) - $this->getCompletedTaskNumber($phases[$i]->getId());
                }

                if(count($this->getTaskData($phases[$i]->getId())) == 0){
                    $data['percent'] = 0;
                } else {
                    $data['percent'] = round(($data['completed_tasks'] / count($this->getTaskData($phases[$i]->getId()))) * 100, 2);
                }

                $phases_data[$i] = $data;
            }
        }
        return $phases_data;

    }

    public function getTaskData($phase_id){
        $tasks_data = array();

        $tasks = $this->taskService->getByPhaseID($phase_id);
        if($tasks){
            for($i = 0; $i < count($tasks); $i++){
//                error_log("deadline: ".$tasks[$i]->getName());
                $data = array(
                    "id"=>$tasks[$i]->getTaskId(),
                    "phase_id"=> $phase_id,
                    "name"=>$tasks[$i]->getName(),
                    "description"=>$tasks[$i]->getDescription(),
                    "deadline"=>Formatter::format_date($tasks[$i]->getDeadline(), 'Y-d-m'),
                    "status"=>$tasks[$i]->getStatus()
                );
                $tasks_data[$i] = $data;
            }
        }
        return $tasks_data;
    }

    public function getPostData($project_id){
        $posts = $this->postService->getByProjectID($project_id);
        $post_data = array();
        if($posts){
            for($i = 0; $i < count($posts); $i++){
                $user = $this->userService->findByID($posts[$i]->getUserId());
                $data = array(
                    "id"=> $posts[$i]->getPostId(),
                    "content"=> $posts[$i]->getContent(),
                    "created_at"=>Formatter::format_date($posts[$i]->getCreatedAt(), "m-d-Y H:i:s"),
                    "user"=>$user->getName()
                );
                $comments = $this->getCommentData($posts[$i]->getPostId());
                if($comments){
                    $data["comments"] =$comments;
                } else {
                    $data['comments'] = array();
                }
                $avatar = $user->getAvatar();
//        error_log("avatar: ". $avatar);
                if(!$avatar){
                    $data['avatar'] = "default_avatar/img_avatar2.png";
                } else{
                    $data['avatar'] = "user_avatar/".$avatar;
                }
                $post_data[$i] = $data;
            }
        }
        return $post_data;
    }

    public function getCommentData($post_id){
        $comments = $this->commentService->getByPostID($post_id);
        $comment_data = array();
        if($comments){
            for($i = 0; $i < count($comments); $i++){
                $user = $this->userService->findByID($comments[$i]->getUserId());
                $data = array(
                    "content" => $comments[$i]->getContent(),
                    "created_at"=> Formatter::format_date($comments[$i]->getCreatedAt(), "m-d-Y H:i:s"),
                    "user"=>$user->getName()
                );
                $avatar = $user->getAvatar();
//        error_log("avatar: ". $avatar);
                if(!$avatar){
                    $data['avatar'] = "default_avatar/img_avatar2.png";
                } else{
                    $data['avatar'] = "user_avatar/".$avatar;
                }
                $comment_data[$i] = $data;
            }
        }
        return $comment_data;
    }

    private function getCompletedTaskNumber($phase_id){
        $tasks = $this->taskService->getByPhaseID($phase_id);
        $completed = 0;
        if($tasks){
            for($i = 0; $i < count($tasks); $i++){
                if($tasks[$i]->getStatus() == '1'){
                    $completed++;
                }
            }
        }
        return $completed;
    }

    public function uploadDocument(){
        $file = $_FILES['document'];
        $student = $this->studentService->getByUserID($_SESSION['user']['id']);
        $allowType = "application/pdf";
        if($file['type'] != $allowType){
            die("Not PDF document");
        }
        $projects = $this->projectService->getAll();
        $project = "";
        foreach ($projects as $proj) {
            if($proj->getStudentId() == $student->getRowId()){
                if($proj->getCompleted() == '0'){
                    $project = $proj;
                }
            }
        }
        $current_document = $project->getContent();
        if(file_exists("/assets/user_document/".$current_document)){
            unlink("/assets/user_document/".$current_document);
        }
        $new_document = $file['name'];
        move_uploaded_file($file['tmp_name'], "assets/user_document/".$new_document);

        $result = $this->projectService->updateContent($new_document, $project->getProjectId());
        if($result != "Success"){
            die($result);
        }

        header("location: /student");


    }

    public function getProfileData(){
        $this->file = "/student/student_profile_ui.php";

        $student = $this->studentService->getByUserID($_SESSION['user']['id']);
        $student_data = array(
            "student_id"=>$student->getStudentId(),
            'email'=>$student->getEmail(),
            'name'=>$student->getName(),
            'phone'=>$student->getPhoneNumber(),
            'year'=>$student->getYear(),
            "class"=>$student->getClass(),
            'branch'=>$student->getBranchId()
        );

        $branch_data = $this->getBranchData();
        $profile_data = array(
            'student'=>$student_data,
            'branches'=>$branch_data
        );
        $avatar = $student->getAvatar();
//        error_log("avatar: ". $avatar);
        if(!$avatar){
            $profile_data['avatar'] = "default_avatar/img_avatar2.png";
        } else{
            $profile_data['avatar'] = "user_avatar/".$avatar;
        }


        return $profile_data;
    }

    public function updateProfile(){
        $student = $this->studentService->getByUserID($_SESSION['user']['id']);
        $student_id = $_POST['student_id'];
        $email = $_POST['email'];
        $name = $_POST['name'];
        $phone = $_POST['phone'];
        $branch = $_POST['branch'];

        $year = isset( $_POST['year']) ?  $_POST['year'] : $student->getYear();
        $class = isset( $_POST['class']) ?  $_POST['class'] : $student->getClass();
        $new_password = isset( $_POST['new_password']) ?  $_POST['new_password'] : "";

        $this->studentService->updateStudent($student_id, $class, $year, $branch, $_SESSION['user']['id']);
        $pass_hashed = $new_password == "" ? $student->getPassHashed() : password_hash($new_password, PASSWORD_DEFAULT);
        $this->userService->updateUser($_SESSION['user']['id'], $email, $name, $phone, $pass_hashed);

        $new_avatar = $student->getAvatar();
        $avatar_img = isset($_FILES['avatar']) ? $_FILES['avatar']: "";
        $allow_type = ['image/png', 'image/jpg','image/jpeg','image/gif'];
        if($avatar_img != ""){
            if(in_array($avatar_img['type'], $allow_type)){
                $new_avatar = $avatar_img['name'];
            }
        }
        $current_avatar = $student->getAvatar();
        if(file_exists("/assets/image/user_avatar/".$current_avatar)){
            unlink("/assets/image/user_avatar/".$current_avatar);
        }
//        die(getcwd());
        move_uploaded_file($avatar_img['tmp_name'], "assets/image/user_avatar/".$new_avatar);

        $this->userService->updateAvatar($new_avatar, $_SESSION['user']['id']);
        header("location: /student");
    }

}